#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define size_spot 18 //관광지의 개수
typedef struct spot { // 관광지의 이름, 거리, 지역, 테마, 정보를 담은 구조체
	char name[20];
	double distance;
	int area;
	int theme;
	char address_phonenumber[200];
	char information[300];
}spot;

void category_area_spot(spot list[size_spot]); // 관광지를 지역(1.상당구 2.서원구 3.창원구 4.청원구)에 따라 분류하는 함수
void category_theme(spot list[size_spot]); // 관광지를 테마(1.교육체험관광 2.농촌체험관광 3.역사문화관광 4.생태자연관광)에 따라 분류하는 함수

int main() {
	int i;
	char* a1;
	int b1, c1, d1;

	spot list_spot[size_spot]; //관광지 구조체 배열 선언
	FILE* p1;

	p1 = fopen("data_spot.csv", "r"); // 관광지를 담은 파일을 연다.

	if (p1 == NULL) {
		printf("파일 읽기 실패!");
		return -1;
	}

	char line[1024];
	for (i = 0; i < size_spot; i++) { // 파일에서 한줄씩 정보를 입력받아 ','로 구분하여 구조체 배열의 각 멤버에 저장하는 반복문
		fgets(line, 1024, p1);
		a1 = strtok(line, ",");
		while (a1 != NULL) {
			strcpy(list_spot[i].name, a1);
			a1 = strtok(NULL, ",");
			b1 = atoi(a1);
			list_spot[i].area = b1;
			a1 = strtok(NULL, ",");
			c1 = atoi(a1);
			list_spot[i].theme = c1;
			a1 = strtok(NULL, ",");
			d1 = atoi(a1);
			list_spot[i].distance = d1;
			a1 = strtok(NULL, ",");
			strcpy(list_spot[i].address_phonenumber, a1);
			a1 = strtok(NULL, ",");
			strcpy(list_spot[i].information, a1);
			a1 = strtok(NULL, ",");

		}
	}

	category_area_spot(list_spot); // 지역에 따라 관광지를 분류하는 함수 실행

	category_theme(list_spot); // 테마에 따라 관광지를 분류하는 함수 실행

	fclose(p1);

	return 0;
}

void category_area_spot(spot list[size_spot]) {
	int i, j;
	printf("1.상당구 2.서원구 3.흥덕구 4.청원구 : ");
	scanf_s("%d", &i);

	switch (i) {
	case 1:
		for (j = 1; j < size_spot; j++) {
			if (list[j].area == 1) {
				printf("%s \n", list[j].name);
				printf("거리: %.1lfkm \n", list[j].distance);
				printf("주소(전화번호): %s \n", list[j].address_phonenumber);
				printf("정보: %s \n", list[j].information);
				printf("\n");


			}
		}
		break;
	case 2:
		for (j = 1; j < size_spot; j++) {
			if (list[j].area == 2) {
				printf("%s \n", list[j].name);
				printf("거리: %.1lfkm \n", list[j].distance);
				printf("주소(전화번호): %s \n", list[j].address_phonenumber);
				printf("정보: %s \n", list[j].information);
				printf("\n");

			}
		}
		break;
	case 3:
		for (j = 1; j < size_spot; j++) {
			if (list[j].area == 3) {
				printf("%s \n", list[j].name);
				printf("거리: %.1lfkm \n", list[j].distance);
				printf("주소(전화번호): %s \n", list[j].address_phonenumber);
				printf("정보: %s \n", list[j].information);
				printf("\n");

			}
		}
		break;
	case 4:
		for (j = 1; j < size_spot; j++) {
			if (list[j].area == 4) {
				printf("%s \n", list[j].name);
				printf("거리: %.1lfkm \n", list[j].distance);
				printf("주소(전화번호): %s \n", list[j].address_phonenumber);
				printf("정보: %s \n", list[j].information);
				printf("\n");

			}
		}
		break;

	}
}

void category_theme(spot list[size_spot]) {
	int i, j;
	printf("1.교육체험관광 2.농촌체험관광 3.역사문화관광 4.생태자연관광 : ");
	scanf_s("%d", &i);

	switch (i) {
	case 1:
		for (j = 1; j < size_spot; j++) {
			if (list[j].theme == 1) {
				printf("%s \n", list[j].name);
				printf("거리: %.1lfkm \n", list[j].distance);
				printf("주소(전화번호): %s \n", list[j].address_phonenumber);
				printf("정보: %s \n", list[j].information);
				printf("\n");

			}
		}
		break;
	case 2:
		for (j = 1; j < size_spot; j++) {
			if (list[j].theme == 2) {
				printf("%s \n", list[j].name);
				printf("거리: %.1lfkm \n", list[j].distance);
				printf("주소(전화번호): %s \n", list[j].address_phonenumber);
				printf("정보: %s \n", list[j].information);
				printf("\n");

			}
		}
		break;
	case 3:
		for (j = 1; j < size_spot; j++) {
			if (list[j].theme == 3) {
				printf("%s \n", list[j].name);
				printf("거리: %.1lfkm \n", list[j].distance);
				printf("주소(전화번호): %s \n", list[j].address_phonenumber);
				printf("정보: %s \n", list[j].information);
				printf("\n");

			}
		}
		break;
	case 4:
		for (j = 1; j < size_spot; j++) {
			if (list[j].theme == 4) {
				printf("%s \n", list[j].name);
				printf("거리: %.1lfkm \n", list[j].distance);
				printf("주소(전화번호): %s \n", list[j].address_phonenumber);
				printf("정보: %s \n", list[j].information);
				printf("\n");

			}
		}
		break;

	}
}
