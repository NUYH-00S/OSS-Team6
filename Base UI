#include <stdio.h>
#include <windows.h>	
#include <stdlib.h>
#include <conio.h>	
#include <stdbool.h>
#include<string.h>

#define size_spot 17       // 관광지의 개수
#define size_restaurant 16 // 맛집의 개수

int x, y;		           // 전역변수 커서 좌표

// 관광지의 정보를 담은 구조체
typedef struct spot
{
	char name[20], address_phonenumber[200], information[300];   // 이름, 주소와 전화번호, 정보
	int region, theme;                                           // 지역, 테마
	float distance;                                              // 거리
}SPOT;

// 맛집의 정보를 담은 구조체
typedef struct restaurant
{
	char name[30], address_phonenumber[200], information[300];   // 이름, 주소와 전화번호, 정보
	int region, menu;                                            // 지역, 메뉴
	float distance;                                              // 거리
}RESTAURANT;

// 구조체 선언
SPOT list_spot[size_spot];
RESTAURANT list_restaurant[size_restaurant];

// 함수 선언
void Cursor(bool flag, int size);
void menu_display();
void move(int m, int n);
void run(int x, int y);
void gotoxy(int x, int y);
const char* region(int n);
const char* theme(int n);
const char* menu(int n);
void print_spotlist(SPOT* list_spot);
void print_restaurantlist(RESTAURANT* list_restaurant);
void sort_distance_restaurant(RESTAURANT list[size_restaurant]); // 거리에 따른 음식점 정렬 함수
void swap_restaurant(RESTAURANT* x, RESTAURANT* y); //음식점 정렬 하는데 도움을 주는 변환 함수
void category_area_restaurant(RESTAURANT list[size_restaurant]); // 음식점을 지역(1.상당구 2.서원구 3.창원구 4.청원구)에 따라 분류하는 함수
void category_menu(RESTAURANT list[size_restaurant]); // 음식점을 메뉴(1.한식 2.분식 3.양식)에 따라 분류하는 함수
void sort_distance_spot(SPOT list[size_spot]); // 거리에 따른 관광지 정렬 함수
void swap_spot(SPOT* x, SPOT* y); // 관광지 정렬 하는데 도움을 주는 변환 함수
void category_area_spot(SPOT list[size_spot]); // 관광지를 지역(1.상당구 2.서원구 3.창원구 4.청원구)에 따라 분류하는 함수
void category_theme(SPOT list[size_spot]); // 관광지를 테마(1.교육체험관광 2.농촌체험관광 3.역사문화관광 4.생태자연관광)에 따라 분류하는 함수


int main()
{
	char* stmp;
	int itmp;
	float ftmp;
	char line1[1024];

	FILE* p1;
	FILE* p2;

	if ((p1 = fopen("data_spot.txt", "r")) == NULL) // data_spot.txt 파일 데이터 받아옴
	{
		printf("파일 읽기 실패!");
		return -1;
	}
	for (int i = 0; i < size_spot; i++) { // 파일에서 한줄씩 정보를 입력받아 ','로 구분하여 구조체 배열의 각 멤버에 저장하는 반복문
		fgets(line1, 1024, p1);
		stmp = strtok(line1, ",");
		while (stmp != NULL) {
			strcpy(list_spot[i].name, stmp);                 // 이름
			stmp = strtok(NULL, ",");
			itmp = atoi(stmp);
			list_spot[i].region = itmp;                      // 지역
			stmp = strtok(NULL, ",");
			itmp = atoi(stmp);
			list_spot[i].theme = itmp;                       // 테마
			stmp = strtok(NULL, ",");
			ftmp = atof(stmp);
			list_spot[i].distance = ftmp;                    // 거리
			stmp = strtok(NULL, ",");
			strcpy(list_spot[i].address_phonenumber, stmp);  // 주소와 전화번호
			stmp = strtok(NULL, ",");
			strcpy(list_spot[i].information, stmp);          // 정보
			stmp = strtok(NULL, ",");
		}
	}
	fclose(p1);

	if ((p2 = fopen("data_restaurant.txt", "r")) == NULL) // data_restaurant.txt 파일 데이터 받아옴
	{
		printf("파일 읽기 실패!");
		return -1;
	}
	for (int i = 0; i < size_restaurant; i++) { // 파일에서 한줄씩 정보를 입력받아 ','로 구분하여 구조체 배열의 각 멤버에 저장하는 반복문
		fgets(line1, 1024, p1);
		stmp = strtok(line1, ",");
		while (stmp != NULL) {
			strcpy(list_restaurant[i].name, stmp);
			stmp = strtok(NULL, ",");
			itmp = atoi(stmp);
			list_restaurant[i].region = itmp;
			stmp = strtok(NULL, ",");
			itmp = atoi(stmp);
			list_restaurant[i].menu = itmp;                        // 메뉴 (나머지는 위와 동일)
			stmp = strtok(NULL, ",");
			ftmp = atof(stmp);
			list_restaurant[i].distance = ftmp;
			stmp = strtok(NULL, ",");
			strcpy(list_restaurant[i].address_phonenumber, stmp);
			stmp = strtok(NULL, ",");
			strcpy(list_restaurant[i].information, stmp);
			stmp = strtok(NULL, ",");
		}
	}
	fclose(p2);

	char key;		// case 분기를 위한 변수
	x = 2, y = 13;	// 메뉴 출력시 "▶"가 있을 위치 설정

	Cursor(false, 1);	// 콘솔 커서 숨기기
	menu_display();		// 메뉴 화면 출력
	//make_student();		// 학생 추가
	//load();			// 저장했던 파일 불러오기

	while (1) {
		key = _getch();		// 문자 즉시 저장
		switch (key) {
		case 13:		// Enter키 == 13		
			run(x, y);		// y좌표의 위치에 따라 동작이 바뀜.
			break;
		case 72:		// ↑ == 72 
			move(0, -3);
			break;
		case 75:        // ← == 75
			move(-20, 0);
			break;
		case 77:        // → == 77
			move(20, 0);
			break;
		case 80:		// ↓ == 80
			move(0, 3);
			break;
		case 27:		// ESC키 == 27
			gotoxy(5, 20);
			exit(0);	// 정상 종료
			break;
		default:
			break;
		}
	}

	return 0;
}

// 콘솔 커서를 숨김 (화살표가 커서의 역할을 함)
void Cursor(bool flag, int size)
{
	CONSOLE_CURSOR_INFO cursorInfo;
	cursorInfo.dwSize = size;
	cursorInfo.bVisible = flag;
	SetConsoleCursorInfo(GetStdHandle(STD_OUTPUT_HANDLE), &cursorInfo);
}

// 메뉴 표시
void menu_display()
{
	system("cls");		// 화면 청소
	gotoxy(5, 2);	 puts("청주어때");
	gotoxy(5, 5);	 puts("프로그램 사용법 ☞	이동: 방향키(↑,↓)");
	gotoxy(5, 7);	 puts("			선택: Enter");
	gotoxy(5, 9);	 puts("			종료: Esc");

	gotoxy(5, 13);	puts("관광지 목록 보기");
	gotoxy(25, 13);		puts("맛집 목록 보기");
	gotoxy(5, 16);	puts("1. 검   색");
	gotoxy(25, 16);	puts("2. 정   렬");
	gotoxy(45, 16);	puts("3. 카테고리");
	gotoxy(65, 16);	puts("4. 여행일기"); // 이거 이름 바꾸셔도 돼요
	gotoxy(85, 16);	puts("5. 상세정보");

	gotoxy(x, y);		// 모두 출력한 후, 원래의 커서 위치로 이동
	printf("▶");

}

// 키보드 입력에 따른 커서 이동
void move(int m, int n)
{
	gotoxy(x, y);
	printf("  ");		// 전에 있던 ▶는 공백으로 덮어쓴다.
	gotoxy(x = x + m, y = y + n);

	// 커서가 지정할 좌표 밖으로 나가지 않도록
	if (y > 16) y = 13;
	if (y < 13) y = 16;
	if (y == 13 && x > 22) x = 2;
	if (y == 13 && x < 2) x = 22;
	if (y == 16 && x > 82) x = 2;
	if (y == 16 && x < 2) x = 82;

	gotoxy(x, y);
	printf("▶");		// 해당 커서의 위치로 이동 후 ▶를 출력한다.
}


void run(int x, int y)
{
	if (x == 2 && y == 13) // 관광지 목록 보기
	{
		menu_display();
		gotoxy(1, 19);
		print_spotlist(list_spot);
	}
	else if (x == 22 && y == 13) // 맛집 목록 보기
	{
		menu_display();
		gotoxy(1, 19);
		print_restaurantlist(list_restaurant);
	}

	/*본인이 만든 함수 여기에 넣어주시면 됩니다. 원래는 제가 다 하려고 했는데, 지금 너무 심신미약상태라 부탁드립니다. ㅠㅠ
	위에 보이는 것처럼
	1. menu_display();
	2. gotoxy(1, 19);
	3. 본인이 구현한 함수
	이 차례로 넣어주시면 됩니다.*/

	else if (x == 2 && y == 16) // 1. 검색
	{
		menu_display();
	}
	else if (x == 22 && y == 16) // 2. 정렬
	{
		menu_display();
		gotoxy(1, 19);
		sort_distance_restaurant(list_restaurant); //거리에 따른 음식점 정렬함수 실행
		sort_distance_spot(list_spot); // 거리에 따른 관광지 정렬함수 실행

	}
	else if (x == 42 && y == 16) // 3. 카테고리
	{
		menu_display();
		gotoxy(1, 19);
		category_area_restaurant(list_restaurant); //지역에 따라 음식점을 분류하는 함수 실행
		category_menu(list_restaurant); // 메뉴에 따라 음식점을 분류하는 함수 실행
		category_area_spot(list_spot); // 지역에 따라 관광지를 분류하는 함수 실행
		category_theme(list_spot); // 테마에 따라 관광지를 분류하는 함수 실행
	}
	else // 4. 상세정보
	{
		menu_display();
	}
}

void gotoxy(int x, int y)	// (x,y)좌표로 커서를 이동
{
	COORD pos = { x - 1,y - 1 };	// 원점은 (0,0)
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), pos);
}

const char* region(int n)
{
	if (n == 1)
		return "상당구";
	else if (n == 2)
		return "서원구";
	else if (n == 3)
		return "흥덕구";
	else
		return "청원구";
}

const char* theme(int n)
{
	if (n == 1)
		return "교육체험관광";
	else if (n == 2)
		return "농촌체험관광";
	else if (n == 3)
		return "역사문화관광";
	else
		return "생태자연관광";
}

const char* menu(int n)
{
	if (n == 1)
		return "한식";
	else if (n == 2)
		return "분식";
	else
		return "양식";
}

void print_spotlist(SPOT* list_spot)
{
	printf("  =========================================================================\n");
	printf("       이름                        지역             테마            거리\n");
	printf("  =========================================================================\n\n");
	for (int i = 0; i < size_spot; i++) 
		printf("   %02d. %-18s\t%8s\t%11s\t%6.1f km\n\n", i + 1, list_spot[i].name, region(list_spot[i].region), theme(list_spot[i].theme), list_spot[i].distance);
	printf("  ==================================================================\n\n");
	return 0;
}

void print_restaurantlist(RESTAURANT* list_restaurant)
{
	printf("  ==================================================================\n");
	printf("       이름                    지역         메뉴            거리\n");
	printf("  ==================================================================\n\n");
	for (int i = 0; i < size_restaurant; i++)
		printf("   %02d. %-20s %8s\t%8s\t%6.1f km\n\n", i + 1, list_restaurant[i].name, region(list_restaurant[i].region), menu(list_restaurant[i].menu), list_restaurant[i].distance);
	printf("  ==================================================================\n\n");
	return 0;
}

void sort_distance_spot(SPOT list[size_spot]) {
	int i, min, j;

	for (i = 0; i < size_spot; i++) {
		min = i;
		for (j = i + 1; j < size_spot; j++) {
			if (list[j].distance < list[min].distance)
				min = j;
		}
		swap_spot(&list[i], &list[min]);
	}

	printf("  =========================================================================\n");
	printf("       이름                        지역             테마            거리\n");
	printf("  =========================================================================\n\n");
	
	for (i = 0; i < size_spot; i++) {
		printf("   %02d. %-18s\t%8s\t%11s\t%6.1f km\n\n", i + 1, list[i].name, region(list[i].region), theme(list[i].theme), list[i].distance);
		
	}
	printf("  ==================================================================\n\n");
}

void swap_spot(SPOT* x, SPOT* y) {
	SPOT temp;

	temp = *x;
	*x = *y;
	*y = temp;
}

void category_area_spot(SPOT list[size_spot]) {
	int i, j;
	int q = 1;
	printf("1.상당구 2.서원구 3.흥덕구 4.청원구 : ");
	scanf_s("%d", &i);

	switch (i) {
	case 1:
		printf("  =========================================================================\n");
		printf("       이름                        지역             테마            거리\n");
		printf("  =========================================================================\n\n");
		for (j = 0; j < size_spot; j++) {
			if (list[j].region == 1) {
				printf("   %02d. %-18s\t%8s\t%11s\t%6.1f km\n\n", q, list[j].name, region(list[j].region), theme(list[j].theme), list[j].distance);
				q++;
			}
		}
		q = 0;
		printf("  ==================================================================\n\n");
		break;
	case 2:
		printf("  =========================================================================\n");
		printf("       이름                        지역             테마            거리\n");
		printf("  =========================================================================\n\n");
		for (j = 0; j < size_spot; j++) {
			if (list[j].region == 2) {
				printf("   %02d. %-18s\t%8s\t%11s\t%6.1f km\n\n", q, list[j].name, region(list[j].region), theme(list[j].theme), list[j].distance);
				q++;
			}
		}
		q = 0;
		printf("  ==================================================================\n\n");
		break;
	case 3:
		printf("  =========================================================================\n");
		printf("       이름                        지역             테마            거리\n");
		printf("  =========================================================================\n\n");
		for (j = 0; j < size_spot; j++) {
			if (list[j].region == 3) {
				printf("   %02d. %-18s\t%8s\t%11s\t%6.1f km\n\n", q, list[j].name, region(list[j].region), theme(list[j].theme), list[j].distance);
				q++;

			}
		}
		q = 0;
		printf("  ==================================================================\n\n");
		break;
	case 4:
		printf("  =========================================================================\n");
		printf("       이름                        지역             테마            거리\n");
		printf("  =========================================================================\n\n");
		for (j = 0; j < size_spot; j++) {
			if (list[j].region == 4) {
				printf("   %02d. %-18s\t%8s\t%11s\t%6.1f km\n\n", q, list[j].name, region(list[j].region), theme(list[j].theme), list[j].distance);
				q++;

			}
		}
		q = 0;
		printf("  ==================================================================\n\n");
		break;

	}
}

void category_theme(SPOT list[size_spot]) {
	int i, j;
	int q = 1;
	printf("1.교육체험관광 2.농촌체험관광 3.역사문화관광 4.생태자연관광 : ");
	scanf_s("%d", &i);

	switch (i) {
	case 1:
		printf("  =========================================================================\n");
		printf("       이름                        지역             테마            거리\n");
		printf("  =========================================================================\n\n");
		for (j = 0; j < size_spot; j++) {
			if (list[j].theme == 1) {
				printf("   %02d. %-18s\t%8s\t%11s\t%6.1f km\n\n", q, list[j].name, region(list[j].region), theme(list[j].theme), list[j].distance);
				q++;

			}
		}
		q = 0;
		printf("  ==================================================================\n\n");
		break;
	case 2:
		printf("  =========================================================================\n");
		printf("       이름                        지역             테마            거리\n");
		printf("  =========================================================================\n\n");
		for (j = 0; j < size_spot; j++) {
			if (list[j].theme == 2) {
				printf("   %02d. %-18s\t%8s\t%11s\t%6.1f km\n\n", q, list[j].name, region(list[j].region), theme(list[j].theme), list[j].distance);
				q++;

			}
		}
		q = 0;
		printf("  ==================================================================\n\n");
		break;
	case 3:
		printf("  =========================================================================\n");
		printf("       이름                        지역             테마            거리\n");
		printf("  =========================================================================\n\n");
		for (j = 0; j < size_spot; j++) {
			if (list[j].theme == 3) {
				printf("   %02d. %-18s\t%8s\t%11s\t%6.1f km\n\n", q, list[j].name, region(list[j].region), theme(list[j].theme), list[j].distance);
				q++;
			}
		}
		q = 0;
		printf("  ==================================================================\n\n");
		break;
	case 4:
		printf("  =========================================================================\n");
		printf("       이름                        지역             테마            거리\n");
		printf("  =========================================================================\n\n");
		for (j = 0; j < size_spot; j++) {
			if (list[j].theme == 4) {
				printf("   %02d. %-18s\t%8s\t%11s\t%6.1f km\n\n", q, list[j].name, region(list[j].region), theme(list[j].theme), list[j].distance);
				q++;

			}
		}
		q = 0;
		printf("  ==================================================================\n\n");
		break;

	}
}

void sort_distance_restaurant(RESTAURANT list[size_restaurant]) {
	int i, min, j;

	for (i = 0; i < size_restaurant; i++) {
		min = i;
		for (j = i + 1; j < size_restaurant; j++) {
			if (list[j].distance < list[min].distance)
				min = j;
		}
		swap_restaurant(&list[i], &list[min]);
	}

	printf("  ==================================================================\n");
	printf("       이름                    지역         메뉴            거리\n");
	printf("  ==================================================================\n\n");

	for (i = 0; i < size_restaurant; i++) {
		printf("   %02d. %-20s %8s\t%8s\t%6.1f km\n\n", i + 1, list[i].name, region(list[i].region), menu(list[i].menu), list[i].distance);

	}
	printf("  ==================================================================\n\n");

}

void swap_restaurant(RESTAURANT* x, RESTAURANT* y) {
	RESTAURANT temp;

	temp = *x;
	*x = *y;
	*y = temp;
}

void category_area_restaurant(RESTAURANT list[size_restaurant]) {
	int i, j;
	int q = 1;
	printf("1.상당구 2.서원구 3.흥덕구 4.청원구 : ");
	scanf_s("%d", &i);
	printf("\n");

	switch (i) {
	case 1:
		printf("  ==================================================================\n");
		printf("       이름                    지역         메뉴            거리\n");
		printf("  ==================================================================\n\n");
		for (j = 0; j < size_restaurant; j++) {
			if (list[j].region == 1) {
				printf("   %02d. %-20s %8s\t%8s\t%6.1f km\n\n", q, list[j].name, region(list[j].region), menu(list[j].menu), list[j].distance);
				q++;
			}


		}
		q = 0;
		printf("  ==================================================================\n\n");
		break;
	case 2:
		printf("  ==================================================================\n");
		printf("       이름                    지역         메뉴            거리\n");
		printf("  ==================================================================\n\n");
		for (j = 0; j < size_restaurant; j++) {
			if (list[j].region == 2) {
				printf("   %02d. %-20s %8s\t%8s\t%6.1f km\n\n", q, list[j].name, region(list[j].region), menu(list[j].menu), list[j].distance);
				q++;

			}
		}
		q = 0;
		printf("  ==================================================================\n\n");
		break;
	case 3:
		printf("  ==================================================================\n");
		printf("       이름                    지역         메뉴            거리\n");
		printf("  ==================================================================\n\n");
		for (j = 0; j < size_restaurant; j++) {
			if (list[j].region == 3) {
				printf("   %02d. %-20s %8s\t%8s\t%6.1f km\n\n", q, list[j].name, region(list[j].region), menu(list[j].menu), list[j].distance);
				q++;

			}
		}
		q = 0;
		printf("  ==================================================================\n\n");
		break;
	case 4:
		printf("  ==================================================================\n");
		printf("       이름                    지역         메뉴            거리\n");
		printf("  ==================================================================\n\n");
		for (j = 0; j < size_restaurant; j++) {
			if (list[j].region == 4) {
				printf("   %02d. %-20s %8s\t%8s\t%6.1f km\n\n", q, list[j].name, region(list[j].region), menu(list[j].menu), list[j].distance);
				q++;

			}
		}
		q = 0;
		printf("  ==================================================================\n\n");
		break;

	}
}

void category_menu(RESTAURANT list[size_restaurant]) {
	int i, j;
	int q = 1;
	printf("1.한식 2.분식 3.양식 : ");
	scanf_s("%d", &i);
	printf("\n");

	switch (i) {
	case 1:
		printf("  ==================================================================\n");
		printf("       이름                    지역         메뉴            거리\n");
		printf("  ==================================================================\n\n");
		for (j = 0; j < size_restaurant; j++) {
			if (list[j].menu == 1) {
				printf("   %02d. %-20s %8s\t%8s\t%6.1f km\n\n", q, list[j].name, region(list[j].region), menu(list[j].menu), list[j].distance);
				q++;

			}
		}
		q = 0;
		printf("  ==================================================================\n\n");
		break;
	case 2:
		printf("  ==================================================================\n");
		printf("       이름                    지역         메뉴            거리\n");
		printf("  ==================================================================\n\n");
		for (j = 0; j < size_restaurant; j++) {
			if (list[j].menu == 2) {
				printf("   %02d. %-20s %8s\t%8s\t%6.1f km\n\n", q, list[j].name, region(list[j].region), menu(list[j].menu), list[j].distance);
				q++;

			}
		}
		q = 0;
		printf("  ==================================================================\n\n");
		break;
	case 3:
		printf("  ==================================================================\n");
		printf("       이름                    지역         메뉴            거리\n");
		printf("  ==================================================================\n\n");
		for (j = 0; j < size_restaurant; j++) {
			if (list[j].menu == 3) {
				printf("   %02d. %-20s %8s\t%8s\t%6.1f km\n\n", q, list[j].name, region(list[j].region), menu(list[j].menu), list[j].distance);
				q++;

			}
		}
		q = 0;
		printf("  ==================================================================\n\n");
		break;

	}
}


//int main(int argc, char* argv[]) {
//
//	printf("청주에서 찾고 싶은 장소가 있나요?.\n");
//	printf("검색해보세요!\n");
//
//	char cKeyword[999999];
//	char cData[33][500] = {
//		"국립청주박물관",
//		"옥화구곡 관광길",
//		"현도장승마을",
//		"청주시립미술관",
//		"두꺼비 생태공원",
//		"용화사",
//		"신미술관",
//		"청주 흥덕사지",
//		"청주고인쇄박물관",
//		"문암생태공원",
//		"청원연꽃마을",
//		"오창호수공원",
//		"초정행궁",
//		"문화제조창",
//		"미래지농촌테마공원",
//		"백로식당",
//		"쫄쫄호떡",
//		"마가레뜨",
//		"상당집",
//		"대산보리밥",
//		"더그랜드허젤",
//		"유미당",
//		"연게소문",
//		"수이재 1928",
//		"만타",
//		"두리떡볶이",
//		"햇살왕만두",
//		"대추나무집",
//		"리리크",
//		"입이즐거운그만두",
//		"옛날뜰" };
//
//	int iIdx = 0;
//	for (iIdx = 0; iIdx < 4; iIdx++) {
//
//		printf("검색 하실 단어를 입력하세요.\n\n");
//		int iMenu = 0;
//
//		printf("검색 :");
//		scanf("%s", cKeyword);
//		printf("\n검색 결과\n");
//		printf("-------------------------------\n\n");
//
//		int iIdxCData = 0, iNoResult = 0;
//		for (iIdxCData = 0; iIdxCData < 10; iIdxCData++) {
//
//			if (strspn(cKeyword, cData[iIdxCData]) == strlen(cKeyword)) {
//				printf("%s\n", cData[iIdxCData]); /*검색결과*/
//				iNoResult++;
//			}
//		}
//		if (iNoResult == 0) {
//			printf("검색결과가 없습니다.\n");
//		}
//
//		printf("----------------------------------\n\n");
//
//		system("pause");
//		system("cls");
//	}
//}
